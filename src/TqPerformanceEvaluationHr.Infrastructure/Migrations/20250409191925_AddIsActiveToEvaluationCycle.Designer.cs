// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TqPerformanceEvaluationHr.Infrastructure.Persistence;

#nullable disable

namespace TqPerformanceEvaluationHr.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250409191925_AddIsActiveToEvaluationCycle")]
    partial class AddIsActiveToEvaluationCycle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GroupEmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GroupEmployeeId");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("Evaluations", (string)null);
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.EvaluationCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EvaluationCycles", (string)null);
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.EvaluationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EvaluationCycleId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationCycleId");

                    b.ToTable("EvaluationGroups", (string)null);
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.EvaluationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("EvaluationModels", (string)null);
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.EvaluationResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaluationId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("QuestionId");

                    b.ToTable("EvaluationResponses", (string)null);
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.EvaluationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaluationId")
                        .HasColumnType("integer");

                    b.Property<string>("QualitativeConcept")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.ToTable("EvaluationResults", (string)null);
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.GroupEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("EvaluationGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EvaluationGroupId");

                    b.ToTable("GroupEmployees", (string)null);
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Positions", (string)null);
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Questionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaluationModelId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationModelId");

                    b.HasIndex("PositionId");

                    b.ToTable("Questionnaires", (string)null);
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Employee", b =>
                {
                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Evaluation", b =>
                {
                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.Employee", "Employee")
                        .WithMany("Evaluations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.GroupEmployee", "GroupEmployee")
                        .WithMany("Evaluations")
                        .HasForeignKey("GroupEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany("Evaluations")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("GroupEmployee");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.EvaluationGroup", b =>
                {
                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.EvaluationCycle", "EvaluationCycle")
                        .WithMany("EvaluationGroups")
                        .HasForeignKey("EvaluationCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluationCycle");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.EvaluationResponse", b =>
                {
                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.Evaluation", "Evaluation")
                        .WithMany("Responses")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.Question", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.EvaluationResult", b =>
                {
                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.Evaluation", "Evaluation")
                        .WithMany("Results")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.GroupEmployee", b =>
                {
                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.Employee", "Employee")
                        .WithMany("GroupEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.EvaluationGroup", "EvaluationGroup")
                        .WithMany("GroupEmployees")
                        .HasForeignKey("EvaluationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EvaluationGroup");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Question", b =>
                {
                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Questionnaire", b =>
                {
                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.EvaluationModel", "EvaluationModel")
                        .WithMany("Questionnaires")
                        .HasForeignKey("EvaluationModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TqPerformanceEvaluationHr.Domain.Entities.Position", "Position")
                        .WithMany("Questionnaires")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluationModel");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("GroupEmployees");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Evaluation", b =>
                {
                    b.Navigation("Responses");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.EvaluationCycle", b =>
                {
                    b.Navigation("EvaluationGroups");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.EvaluationGroup", b =>
                {
                    b.Navigation("GroupEmployees");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.EvaluationModel", b =>
                {
                    b.Navigation("Questionnaires");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.GroupEmployee", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Position", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Questionnaires");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Question", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("TqPerformanceEvaluationHr.Domain.Entities.Questionnaire", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
